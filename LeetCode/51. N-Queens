class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:

        def issafe(row,col,board):
            temp_row = row
            temp_col = col

            while temp_row >= 0 and temp_col >= 0:
                if board[temp_row][temp_col] == 'Q':
                    return False
                temp_row -= 1
                temp_col -= 1

            temp_row = row
            temp_col = col

            while temp_col >= 0:
                if board[temp_row][temp_col] == 'Q':
                    return False
                temp_col -= 1

            temp_row = row
            temp_col = col

            while temp_row < n and temp_col >= 0:
                if board[temp_row][temp_col] == 'Q':
                    return False
                temp_row += 1
                temp_col -= 1

            return True



        def backtrack(col,board):
            if col == n:
                ans.append(board[:])
                return

            for row in range(n):
                if issafe(row,col,board):
                    board[row] = board[row][:col] + "Q" + board[row][col+1:] 
                    backtrack(col+1,board)
                    board[row] = board[row][:col] + "." + board[row][col+1:] 


        
        ans = []
        row = n
        col = n
        
        board = ['.'*n for i in range(n)]

        backtrack(0,board)

        return ans
       
                    

            
            
                        

                
