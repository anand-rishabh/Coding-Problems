

# ------------------ using Memoization (Top-Down)--------------------


class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])

        def recurs(matrix,i,j,lookup):
            if (i,j) in lookup:
                return lookup[(i,j)]
   
            if i == n-1 and j == m-1:
                return matrix[i][j]
            elif i == n-1:
                lookup[(i,j)] = matrix[i][j] + recurs(matrix,i,j+1,lookup)
                return lookup[(i,j)] 
            elif j == m-1:
                lookup[(i,j)] = matrix[i][j] + recurs(matrix,i+1,j,lookup)
                return lookup[(i,j)]
            else:
                lookup[(i,j)] = matrix[i][j] + min(recurs(matrix,i+1,j,lookup),recurs(matrix,i,j+1,lookup))
                return lookup[(i,j)]

        return recurs(grid,0,0,{})


# ------------------ using Tabulation (Bottom-Up)--------------------


class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:

        n = len(grid)
        m = len(grid[0])

        dp = [[0]*m for i in range(n)]
        matrix = grid
        dp[0][0] = matrix[0][0]

        for j in range(1,m):
            dp[0][j] = matrix[0][j] + dp[0][j-1]
        for i in range(1,n):
            dp[i][0] = matrix[i][0] + dp[i-1][0]

        for i in range(1,n):
            for j in range(1,m):
                dp[i][j] = matrix[i][j] + min(dp[i][j-1] , dp[i-1][j])
        return dp[n-1][m-1]




# ------------------ using Tabulation (Bottom-Up) with 2 row at a time to reduce space complexity--------------------

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:

        n = len(grid)
        m = len(grid[0])            

        prev_dp = [0]*m
        curr_dp = [0]*m
        prev_dp[0] = grid[0][0]

        for j in range(1,m):
            prev_dp[j] = grid[0][j] + prev_dp[j-1]
        
        for i in range(1,n):
            curr_dp[0] = grid[i][0] + prev_dp[0]
            for j in range(1,m):
                curr_dp[j] = grid[i][j] + min(prev_dp[j],curr_dp[j-1])
            
            prev_dp = curr_dp
            curr_dp = [0]*m

        return prev_dp[-1]

