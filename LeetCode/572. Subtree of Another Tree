from collections import deque

class Solution:
    def isSubtree(self, r: Optional[TreeNode], s: Optional[TreeNode]) -> bool:
        
        if not s : return True
        if not r : return False

        def checker(r,s):
            if not r and not s:
                return True
            if r and s and r.val == s.val:
                return checker(r.left,s.left) and checker(r.right,s.right)
            return False

        # if checker(r,s):
        #     return True
        
        # return self.isSubtree(r.left,s) or self.isSubtree(r.right,s)
        
        if r:
            q = deque([r])
            while q:
                for i in range(len(q)):
                    root = q.popleft()
                    if root.left:
                        q.append(root.left)
                    if root.right:
                        q.append(root.right)
                    if root.val == s.val:
                        if checker(root,s):
                            return True
        return False

