

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:

        #--------------------------------Memoization-----------------------

        # n = len(obstacleGrid)
        # m = len(obstacleGrid[0])

        # def path(matrix,i,j,scope):
        #     if (i,j) in scope:
        #         return scope[(i,j)]
        #     if i == n or j == m or matrix[i][j] == 1:
        #         return 0
        #     elif i == n-1 and j == m-1:
        #         return 1
        #     else:
        #         scope[(i,j)] =  path(matrix,i+1,j,scope) + path(matrix,i,j+1,scope)
        #         return scope[(i,j)]
                
        # return path(obstacleGrid,0,0,{})


        # ------------------------------Tabulation--------------------

        # n = len(obstacleGrid)
        # m = len(obstacleGrid[0])

        # dp = [[0]*m for i in range(n)]

        # dp[0][0] = 1 if obstacleGrid[0][0] == 0 else 0
        
        # for j in range(1,m):
        #     if obstacleGrid[0][j] != 1:
        #         dp[0][j] = dp[0][j-1]
        #     else:
        #         dp[0][j] = 0
        
        # for i in range(1,n):
        #     dp[i][0] = dp[i-1][0] if obstacleGrid[i][0] != 1 else 0

        # for i in range(1,n):
        #     for j in range(1,m):
        #         if obstacleGrid[i][j] != 1:
        #             dp[i][j] = dp[i-1][j] + dp[i][j-1]
        #         else:
        #             dp[i][j] = 0
        
        # return dp[n-1][m-1]


        # -----------------------------Tabulation using 2row----------------

        n = len(obstacleGrid)
        m = len(obstacleGrid[0])

        prev_dp = [0]*m
        curr_dp = [0]*m

        prev_dp[0] = 1 if (obstacleGrid[0][0] == 0) else 0

        for i in range(1,m):
            prev_dp[i] = prev_dp[i-1] if (obstacleGrid[0][i] == 0) else 0

        for i in range(1,n):
            curr_dp[0] = prev_dp[0] if (obstacleGrid[i][0] == 0) else 0
            for j in range(1,m):
                if (obstacleGrid[i][j] == 0) :
                    curr_dp[j] = curr_dp[j-1] + prev_dp[j]
                else:
                    curr_dp[j] = 0
            prev_dp = curr_dp
            curr_dp = [0]*m

        return prev_dp[-1]

                    






